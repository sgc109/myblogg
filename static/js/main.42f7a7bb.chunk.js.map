{"version":3,"sources":["Navbar.js","App.js","AppRouter.js","serviceWorker.js","index.js"],"names":["Navbar","state","handleItemClick","e","_ref","name","_this","setState","activeItem","this","react_default","a","createElement","Menu","Item","header","as","Link","to","active","onClick","href","Component","Home","Aboutme","App","className","Navbar_Navbar","Image","src","react_router","path","exact","component","AppRouter","react_router_dom","basename","process","src_App","Boolean","window","location","hostname","match","ReactDOM","render","src_AppRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sSAIqBA,6MACjBC,MAAQ,KAERC,gBAAkB,SAACC,EAADC,GAAA,IAAMC,EAAND,EAAMC,KAAN,OAAiBC,EAAKC,SAAS,CAAEC,WAAYH,6EAEtD,IACGG,EAAeC,KAAKR,MAApBO,WAER,OACIE,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAKC,KAAN,CAAWC,QAAM,EAACC,GAAIC,IAAMC,GAAG,KAA/B,UAGAR,EAAAC,EAAAC,cAACC,EAAA,EAAKC,KAAN,CACIT,KAAK,UACLW,GAAIC,IAAMC,GAAG,YACbC,OAAuB,YAAfX,EACRY,QAASX,KAAKP,kBAElBQ,EAAAC,EAAAC,cAACC,EAAA,EAAKC,KAAN,CACIT,KAAK,SACLc,OAAuB,WAAfX,EACRY,QAASX,KAAKP,gBACdmB,KAAK,gBAETX,EAAAC,EAAAC,cAACC,EAAA,EAAKC,KAAN,CACIT,KAAK,OACLgB,KAAK,YACLF,OAAuB,SAAfX,EACRY,QAASX,KAAKP,0BA7BEoB,qCCGpC,SAASC,IACP,OAAOb,EAAAC,EAAAC,cAAA,iBAET,SAASY,IACP,OAAOd,EAAAC,EAAAC,cAAA,qBAcMa,MAXf,WACE,OACEf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OACbhB,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,IAAI,oCACXnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWV,IACjCb,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,KAAK,YAAYC,OAAK,EAACC,UAAWT,MCPhCU,MARf,WACI,OACIxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAQC,SAAUC,WACd3B,EAAAC,EAAAC,cAAC0B,EAAD,QCIQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAAeC,SAASC,eAAe,SD0HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.42f7a7bb.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Menu, Image } from 'semantic-ui-react'\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nexport default class Navbar extends Component {\n    state = {}\n\n    handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n\n    render() {\n        const { activeItem } = this.state\n\n        return (\n            <Menu>\n                <Menu.Item header as={Link} to='/'>\n                    Sungho\n                </Menu.Item>\n                <Menu.Item\n                    name='aboutme'\n                    as={Link} to='/aboutme/'\n                    active={activeItem === 'aboutme'}\n                    onClick={this.handleItemClick}\n                />\n                <Menu.Item\n                    name='resume'\n                    active={activeItem === 'resume'}\n                    onClick={this.handleItemClick}\n                    href='resume.html'\n                />\n                <Menu.Item\n                    name='game'\n                    href='game.html'\n                    active={activeItem === 'game'}\n                    onClick={this.handleItemClick}\n                />\n            </Menu>\n\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport { Menu, Image } from 'semantic-ui-react'\nimport { Route } from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css'\n\nfunction Home() {\n  return <b>Home</b>;\n}\nfunction Aboutme() {\n  return <b>About Me</b>;\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n      <Image src=\"/public/images/background2.jpeg\"/>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/aboutme/\" exact component={Aboutme} />\n    </div>\n  );\n}\n\nexport default App;\n// export default ImageExampleFluid","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport App from './App';\n\n\nfunction AppRouter() {\n    return (\n        <Router basename={process.env.PUBLIC_URL}>\n            <App></App>\n        </Router>\n    );\n}\n\nexport default AppRouter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport AppRouter from './AppRouter';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}